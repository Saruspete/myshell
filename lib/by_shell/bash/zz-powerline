#
# Origin: https://gitlab.com/bersace/powerline.bash/tree/master
#
# Merge of https://github.com/b-ryan/powerline-shell/ and
# https://github.com/skeswa/prompt .

# Fonts:
# Gentoo: Require media-fonts/powerline-symbols
# Other:
#   git clone https://github.com/powerline/fonts --depth=1
#   cd fonts
#   ./install.sh

#
# Configuration:
#
# POWERLINE_SEGMENTS="pwd venv git"
# POWERLINE_STYLE="default" or your
# POWERLINE_SEP=''
# POWERLINE_THINSEP=''
#
# These variables can be set per shell, without export.
__default_sep=''
__default_thinsep=''

# This value is used to hold the return value of the prompt sub-functions. This
# hack avoid calling functions un subprocess to get ret from stdout.
__powerline_retval=""

__powerline_utf8=""

function __powerline_split {
	typeset sep="$1"
	typeset str="$2"
	typeset OIFS="${IFS}"
	IFS="$sep"
	set -f
	__powerline_retval=(${str})
	set +f
	if [ "${OIFS}" = "__UNDEF__" ] ; then
		unset IFS
	else
		IFS="${OIFS}"
	fi
}

function __powerline_find_parent {
	typeset cwd="$1"
	typeset name="$2"
	__powerline_retval=

	while [ "$cwd" ] ; do
		if [ -e "$cwd/$name" ] ; then
			__powerline_retval="$cwd/$name"
			return
		fi
		# Sinon, on remonte d'un cran dans l'arborescence.
		cwd="${cwd%/*}"
	done
}

# Gets the current working directory path, but shortens the directories in the
# middle of long paths to just their respective first letters.
function __powerline_shorten_dir {
	# Break down the typeset variables.
	typeset short_pwd
	typeset dir="$1"

	__powerline_split / "${dir##/}"
	typeset dir_parts=("${__powerline_retval[@]}")
	typeset number_of_parts=${#dir_parts[@]}

	# If there are less than 6 path parts, then do no shortening.
	if [[ "$number_of_parts" -lt "5" ]]; then
		__powerline_retval="${dir}"
		return
	fi
	# Leave the last 2 part parts alone.
	typeset last_index="$(( $number_of_parts - 3 ))"
	typeset short_pwd=""

	# Check for a leading slash.
	if [[ "${dir:0:1}" == "/" ]]; then
		# If there is a leading slash, add one to `short_pwd`.
		short_pwd+='/'
	fi

	for i in "${!dir_parts[@]}"; do
		# Append a '/' before we do anything (provided this isn't the first part).
		if [[ "$i" -gt "0" ]]; then
			short_pwd+='/'
		fi

		# Don't shorten the first/last few arguments - leave them as-is.
		if [[ "$i" -lt "2" || "$i" -gt "$last_index" ]]; then
			short_pwd+="${dir_parts[i]}"
		else
			# This means that this path part is in the middle of the path. Our logic
			# dictates that we shorten parts in the middle like this.
			short_pwd+="${dir_parts[i]:0:1}"
		fi
	done

	# Return the resulting short pwd.
	__powerline_retval="$short_pwd"
}

# Parses git status --porcelain=v2 output in an array
function __powerline_parse_git_status_v2 {
	typeset status="$1"
	# branch infos as returned by status : sha, name, upstream, ahead/behind
	typeset branch_infos=()
	typeset sha
	typeset dirty=
	typeset ab
	typeset detached=

	while read line ; do
		# If line starts with '# ', it's branch info
		if [ -z "${line### branch.*}" ] ; then
			branch_infos+=("${line#\# branch.* }")
		else
			# Else, it's a changes. The worktree is dirty
			dirty=1
			break
		fi
	done <<< "${status}"

	# Try to provide a meaningful info if we are not on a branch.
	if [ "${branch_infos[1]}" == "(detached)" ] ; then
		detached=1
		if desc="$(git describe --tags --abbrev=7 2>/dev/null)" ; then
			branch="${desc}"
		else
			# Au pire des cas, utiliser la SHA du commit courant.
			branch="${branch_infos[0]:0:7}"
		fi
	else
		branch="${branch_infos[1]}"
	fi

	ab="${branch_infos[3]-}"
	__powerline_retval=("${branch}" "${dirty}" "${ab}" "${detached}")
}

# Analyser la sortie v1 de git status --porcelain
function __powerline_parse_git_status_v1 {
	typeset status="$1"

	typeset branch
	typeset detached=
	typeset dirty=

	__powerline_split $'\n' "$status"
	typeset lines=("${__powerline_retval[@]}")

	for line in "${lines[@]}" ; do
		if [ "${line}" = "## HEAD (no branch)" ] ; then
			detached=1
			if desc="$(git describe --tags --abbrev=7 2>/dev/null)" ; then
				branch="${desc}"
			else
				# Au pire des cas, utiliser la SHA du commit courant.
				branch="$(git rev-parse --short HEAD)"
			fi
		elif [ -z "${line####*}" ] ; then
			__powerline_split '...' "${line#### }"
			branch="${__powerline_retval[0]}"
		else
			# Les autres lignes sont des lignes de modification.
			dirty=1
			break
		fi
	done

	# On bidonne l'état de synchronisation, faut d'information dans git status.
	typeset ab="+0 -0"

	__powerline_retval=("${branch}" "${dirty}" "${ab}" "${detached}")
}

# Sélectionner le format de git status à analyser
__powerline_git_version="$(git --version 2>/dev/null)"
__powerline_git_version="${__powerline_git_version#git version }"

# la V2 affiche en une commande l'état de synchronisation.
if printf "2.11.0\n%s" "${__powerline_git_version}" | sort --version-sort --check=quiet ; then
	__powerline_git_cmd=(git status --branch --porcelain=v2)
	__powerline_git_parser=__powerline_parse_git_status_v2
else
	__powerline_git_cmd=(git status --branch --porcelain)
	__powerline_git_parser=__powerline_parse_git_status_v1
fi


function __powerline_get_foreground {
	typeset R=$1
	typeset G=$2
	typeset B=$3

	# Les terminaux 256 couleurs ont 6 niveaux pour chaque composant. Les
	# valeurs réelles associées aux indices entre 0 et 5 sont les suivantes.
	typeset values=(0 95 135 175 215 255)
	# Indice de luminosité entre 0 et 9 calculé à partir des composants RGB.
	typeset luminance
	# On associe une couleur de texte pour chaque niveau de luminosité entre 0
	# et 9. Du gris clair au gris foncé en passant par blanc et noir.
	typeset foregrounds=(252 253 253 255 255 16 16 235 234 234)

	# cf. https://fr.wikipedia.org/wiki/SRGB#Caract%C3%A9ristiques_principales
	luminance=$(((${values[${R}]} * 2126 + ${values[${G}]} * 7152 + ${values[${B}]} * 722) / 280000))

	# Tronquer la partie décimale et assurer le 0 initial.
	LC_ALL=C printf -v luminance "%.0f" $luminance

	# Récupérer la couleur de texte selon la luminosité
	__powerline_retval=${foregrounds[$luminance]}

	# Afficher le résultat pour test visuel.
	if [ -n "${DEBUG-}" ] ; then
		fg=${__powerline_retval}
		bg=$((16 + 36 * R + 6 * G + B))
		fgbg="$fg/$bg"
		text="${LOGNAME}@${HOSTNAME}"
		printf "\\e[38;5;${fg};48;5;${bg}m $text \\e[0m RGB=%s L=%d %7s" "${RGB}" $luminance $fgbg
	fi
}


###############################################################################
# Segments: shortname to designate a part of the pompt.
# Must be functions prefixed by "__powerline_segment_"
#
# `<t|p>:<bg_color>:<fg_color>:<text>`. Chaque chaîne correspond à un segment.
function __powerline_init_hostname {
	# Comme le segment hostname est fixe tout au long de l'exécution du
	# shell, on le précalcule.
	typeset bg
	typeset rgb
	typeset fg
	typeset text
	typeset hash

	HOSTNAME="$(uname -n)"
	USER="${USER-${USERNAME-${LOGNAME-}}}"
	# N'appeler whoami qui si besoin
	if [ -z "${USER}" ] ; then
		USER=$(whoami)
	fi

	text="${USER}@${HOSTNAME-*unknown*}"

	# Calculer la couleur à partir du texte à afficher.
	hash=$(sum <<< "${text}")
	bg=$((1${hash// /} % 215))
	rgb=($((bg / 36)) $(((bg % 36) / 6)) $((bg % 6)))
	bg=$((16+bg))

	# Assurer la lisibilité en déterminant la couleur du texte en fonction de la
	# clareté du fond.
	__powerline_get_foreground "${rgb[@]}"
	fg=${__powerline_retval}

	__powerline_hostname_segment="p:48;5;${bg}:38;5;${fg}:${POWERLINE_HOSTNAME_ICON-}:${text}"
}
function __powerline_segment_hostname {
	__powerline_retval=("$__powerline_hostname_segment")
}

function __powerline_segment_time {
	typeset bg=237 fg=250
	__powerline_retval=("p:48;5;${bg}:38;5;${fg}:${POWERLINE_CLOCK_ICON-}:\\t")
}

function __powerline_segment_scheduler {
	__powerline_retval=()
	# Slurm
	if [[ -n "${SLURM_JOB_ID:-}" ]]; then
		__powerline_retval=("p:48;5;33:38;5;0::JobID $SLURM_JOB_ID $SLURM_JOB_CPUS_PER_NODE")
	fi
}


function __powerline_segment_docker {
	typeset bg
	typeset dir
	typeset project
	typeset service_nr
	typeset statuses
	typeset started

	__powerline_retval=()

	__powerline_find_parent "$PWD" docker-compose.yml
	if [ -z "$__powerline_retval" ] ; then
		return
	fi

	# Compter le nombre de services dans le fichier compose.
	service_nr="$(grep --count "^    image:" "$__powerline_retval")"
	dir="${__powerline_retval%/*}"
	project="${COMPOSE_PROJECT_NAME-${dir##*/}}"

	# Lister les conteneurs associé au projet. docker (en go) est beaucoup
	# plus rapide que docker-compose (python). Environ 5 fois.
	statuses=$(docker ps --all --format "{{ .Status }}" --filter label=com.docker.compose.project="$project")
	__powerline_split $'\n' "${statuses}"
	# Nettoyer les ` for X hour` et ` (0) X hours` pour ne garder que Up et Exited.
	statuses=("${__powerline_retval[@]// *}")
	started=(${statuses[@]/#Exit*})
	if [ "${#started[@]}" -eq "${service_nr}" ] ; then
		bg="48;5;39"  # bleu ciel docker
	else
		bg="48;5;53"  # violet, ne pas trop jurer avec status et git.
	fi

	__powerline_retval=(
		"p:$bg:38;5;15:\\[\\e[97m\\]${POWERLINE_DOCKER_ICON-docker}:${#started[@]}/${service_nr}"
	)
}

function __powerline_segment_k8s {
	typeset seg
	__powerline_retval=()

	typeset ctx=$(kubectl config current-context)
	typeset ns=$(kubectl config view --minify --output 'jsonpath={..namespace}')

	if [ "${POWERLINE_K8S_CTX_SHOW:-0}" == "1" ]; then
		seg="${ctx}/${ns}"
	else
		seg="${ns}"
	fi

	__powerline_retval=("p:38;5;27:15:${POWERLINE_K8S_ICON-}:$seg")
}

function __powerline_segment_openstack {
	__powerline_retval=()
	if [ -z "${OS_USERNAME-}${OS_APPLICATION_CREDENTIAL_ID-}" ] ; then
		return;
	fi

	typeset text
	if [ -n "${OS_USERNAME-}" ] ; then
		text="${OS_USERNAME}"
	else
		text="${OS_APPLICATION_CREDENTIAL_ID::8}"
	fi

	text+="@"
	if [ -n "${OS_PROJECT_NAME-}" ] ; then
		text+="${OS_PROJECT_NAME}"
	else
		text+="${OS_AUTH_URL##http*//}"
	fi

	typeset bg="48;5;251"
	typeset fg="38;5;236"
	typeset icon_color="\\[\\e[38;5;160m\\]"
	__powerline_retval=(
		"p:${bg}:${fg}:${icon_color}${POWERLINE_OPENSTACK_ICON-¤}:${text}"
	)
}

function __powerline_init_maildir {
	if ! [ -v POWERLINE_MAILDIR ] ; then
		echo "POWERLINE_MAILDIR indéfini. Voir la documentation." >&2
	fi
}

function __powerline_segment_maildir {
	__powerline_retval=()
	newmails=(${POWERLINE_MAILDIR}/new/*)
	typeset count="${#newmails[@]}"
	if [ ${newmails[0]} = ${POWERLINE_MAILDIR}'/new/*' ] ; then
		# nullglob option not activated, dir is empty so the glob returns the pattern
		return
	fi
	typeset bg="48;5;11"
	typeset fg="1;38;5;20"
	__powerline_retval=("p:${bg}:${fg}:${POWERLINE_NEWMAIL_ICON-M}:${count}")
}

function __powerline_segment_pwd {
	typeset colors
	typeset next_sep
	typeset short_pwd
	typeset icon

	__powerline_shorten_dir "$(dirs +0)"
	typeset short_pwd="${__powerline_retval}"

	__powerline_split / "${short_pwd}"
	typeset parts=("${__powerline_retval[@]}")

	__powerline_retval=()
	typeset sep=p
	icon="${POWERLINE_PWD_ICON-}"
	for part in "${parts[@]}" ; do
		if [ "${part}" = '~' -o "${part}" = "" ] ; then
			icon="${POWERLINE_HOME_ICON-~}"
			part=
			colors="48;5;31:38;5;15"
			next_sep=p # plain
		elif [ "${part}" = "" ] ; then
			colors="48;5;237:38;5;254"
			next_sep=t  # thin
		else
			colors="48;5;237:38;5;250"
			# Les segments suivants auront un séparateur léger
			next_sep=t # thin
		fi
		__powerline_retval+=("${sep}:${colors}:${icon}:${part}")
		sep=${next_sep}
		icon=
	done
}

function __powerline_pyenv_version_name {
	typeset dir=$PWD
	__powerline_retval=${PYENV_VERSION-}
	if [ -n "${__powerline_retval}" ] ; then
		return
	fi

	__powerline_find_parent "${dir}" .python-version
	if [ -n "$__powerline_retval" ] && read -r __powerline_retval < "$__powerline_retval" 2>/dev/null ; then
		# read a trouvé quelque choses (et l'a enregistré), c'est tout bon.
		return
	fi

	# L'existence de ${PYENV_ROOT} a déjà été testée dans le segment "python".
	if [ -f ${PYENV_ROOT}/version ] ; then
		read __powerline_retval < ${PYENV_ROOT}/version 2>/dev/null
	fi
}

function __powerline_segment_python {
	typeset text

	if [ -v VIRTUAL_ENV ] ; then
		# Les virtualenv python classiques
		text=${VIRTUAL_ENV##*/}
	elif [ -v CONDA_ENV_PATH ] ; then
		text=${CONDA_ENV_PATH##*/}
	elif [ -v CONDA_DEFAULT_ENV ] ; then
		text=${CONDA_DEFAULT_ENV##*/}
	elif [ -v PYENV_ROOT ] ; then
		# Les virtualenv et versions pyenv
		__powerline_pyenv_version_name
		text=$__powerline_retval
	fi

	if [ -n "${text}" ] ; then
		__powerline_retval=("p:48;5;25:38;5;220:${POWERLINE_PYTHON_ICON-}:${text}")
	else
		__powerline_retval=()
	fi
}

function __powerline_segment_cmdtime {
	# Using myshell pre-exec time
	if [[ -n "${MYS_PREEXECTIME:-}" ]]; then
		typeset -i time_sec="$((${SECONDS:-$(date +%s)} - $MYS_PREEXECTIME))"
		__powerline_retval=("p:48;5;25:38;5;220:${POWERLINE_CLOCKRUN_ICON-}:${time_sec}s")
		return
	fi
}

function __powerline_segment_status {
	typeset ec=$1

	if [[ $ec -eq 0 ]]; then
		__powerline_retval=()
		return
	fi

	#__powerline_retval=("p:48;5;1:38;5;234;1:✘ $ec")
	__powerline_retval=("p:48;5;1:1;38;5;253:${POWERLINE_FAIL_ICON-✘}:$ec")
}

function __powerline_segment_git {
	typeset branch
	typeset colors
	typeset ab
	typeset ab_segment=''
	typeset detached
	typeset status_symbol

	# Si pas de dossier .git parent, zapper.
	__powerline_find_parent "${PWD}" .git
	if [ -z "$__powerline_retval" ] ; then
		__powerline_retval=()
		return
	fi

	if ! status="$(LC_ALL=$__powerline_utf8 "${__powerline_git_cmd[@]}" 2>/dev/null)" ; then
		__powerline_retval=()
		return
	fi
	$__powerline_git_parser "${status}"
	branch="${__powerline_retval[0]}"
	ab="${__powerline_retval[2]}"
	detached="${__powerline_retval[3]}"

	# Colorer la branche selon l'existance de modifications.
	if [ -n "${__powerline_retval[1]}" ] ; then
		# Modifications présentes.
		branch_fg="38;5;230"
		branch_bg="48;5;124"
		status_symbol="*"
	else
		# Pas de modifications.
		branch_fg="38;5;0"
		branch_bg="48;5;148"
	fi
	icon="\\[\\e[38;5;166m\\]${POWERLINE_GIT_ICON-}"
	colors="${branch_bg}:${branch_fg}"
	anchor=$'\u2693' # Émoji: ⚓
	anchor="${POWERLINE_GIT_DETACHED_ICON-${anchor}}"

	__powerline_retval=("p:${colors}:${icon}:${detached:+ ${anchor}}${branch}${status_symbol-}")

	# Compute ahead/behind segment
	if [ -n "${ab##+0*}" ] ; then
		# No +0, the typeset branch is ahead upstream.
		ab_segment="⬆"
	fi
	if [ -n "${ab##+* -0}" ] ; then
		# No -0, the typeset branch is behind upstream.
		ab_segment+="⬇"
	fi
	if [ -n "${ab_segment}" ] ; then
		__powerline_retval+=("p:48;5;240:38;5;250::${ab_segment}")
	fi
}


# A render function is a bash function starting with `__powerline_render_`. It puts
# a PS1 string in `__powerline_retval`.

function __powerline_render_default {
	typeset bg=''
	typeset fg
	typeset icon
	typeset infos
	typeset old_bg
	typeset ps=''
	typeset segment
	typeset text
	typeset separator

	for segment in "${__powerline_segments[@]}" ; do
		if [ -z "${segment}" ] ; then
			continue
		fi

		old_bg=${bg-}
		__powerline_split ':' "${segment}"
		infos=("${__powerline_retval[@]}")
		icon="${infos[3]}"
		# Recoller les entrées 2 et suivantes avec :
		printf -v text ":%s" "${infos[@]:4}"
		text=${text:1}
		# Nettoyer le \n ajouté par <<<
		text="${text##[[:space:]]}"
		text="${text%%[[:space:]]}"
		# Sauter les segments vides
		if [ -z "${text}" ] && [ -z "$icon" ]; then
			continue
		fi

		# D'abord, afficher le chevron avec la transition de fond.
		bg=${infos[1]%%:}
		fg=${infos[2]%%:}
		if [ -n "${old_bg}" ] ; then
			if [ "${infos[0]}" = "t" ] ; then
				# Séparateur léger, même couleurs que le texte
				separator=${POWERLINE_THINSEP-}
				colors="${fg};${bg}"
			else
				separator=${POWERLINE_SEP-}
				colors="${old_bg/48;/38;};${bg}"
			fi
			ps+="\\[\\e[0;${colors}m\\]${separator}"
		fi

		# Ensuite, afficher le segment, coloré.
		ps+="\\[\\e[0;${bg};"
		if [ -n "$icon" ] ; then
			# Définir la couleur de texte sans la graisse (qui doit
			# être au début) avant l'icône et définir la couleur de
			# texte avec graisse après l'icône. Cela permet d'avoir
			# l'icône dans la même couleur que le texte mais sans
			# graisse par défaut, et de pouvoir changer la couleur
			# de l'icône.
			ps+="${fg/#1;/}m\\] $icon\\[\\e[${fg}m\\]"
		else
			# Pas d'icône, on défini simplement la couleur de
			# texte.
			ps+="${fg}m\\]"
		fi
		if [ -n "${text}" ] ; then
			ps+=" $text"
		fi
		ps+=" "
	done

	# Afficher le dernier chevron, transition du fond vers rien.
	old_bg=${bg-}
	bg='49'
	if [ -n "${old_bg}" ] ; then
		ps+="\\[\\e[${old_bg/#48;/38;};${bg}m\\]${POWERLINE_SEP-${__default_sep}}"
	fi
	# Changer le titre de la fenêtre ou de l'onglet, par ex. POWERLINE_WINDOW_TITLE="\h"
	if [ -v POWERLINE_WINDOW_TITLE ] ; then
		ps+="\\[\\e]0;${POWERLINE_WINDOW_TITLE}\a\\]"
	fi

	# Retourner l'invite de commande
	__powerline_retval="${ps}"
}


# Show dollar line.
function __powerline_dollar {
	typeset fg
	typeset last_exit_code=$1
	# Déterminer la couleur du dollar
	if [ $last_exit_code -gt 0 ] ; then
		fg=${ERROR_FG-"1;38;5;161"}
	else
		fg=0
	fi
	# Afficher le dollar sur une nouvelle ligne, pas en mode powerline
	__powerline_retval="\[\e[${fg}m\]\\\$\[\e[0m\] "
}

function __update_ps1 {
	typeset last_exit_code=${1-$?}
	typeset __powerline_segments=()
	typeset segname

	for segname in ${POWERLINE_SEGMENTS-hostname pwd cmdtime status} ; do
		"__powerline_segment_${segname}" $last_exit_code
		__powerline_segments+=("${__powerline_retval[@]}")
	done

	typeset __ps1=""
	"__powerline_render_${POWERLINE_STYLE-default}"
	__ps1+="${__powerline_retval}"
	__powerline_dollar $last_exit_code
	__ps1+="\n${__powerline_retval}"
	PS1="${__ps1}"
}

function __powerline_autosegments {
	# Détermine les segments pertinent pour l'environnement.
	__powerline_retval=()

	__powerline_retval+=(time)

	typeset remote;
	remote=${SSH_CLIENT-${SUDO_USER-${container-}}}
	[[ -z "$remote" ]] && [[ "$(stat -c %U $(tty))" != "$USER" ]] && remote="su"
	if [ -n "${remote}" ] ; then
		__powerline_retval+=(hostname)
	fi

	if [ -v POWERLINE_MAILDIR ] ; then
		__powerline_retval+=(maildir)
	fi

	__powerline_retval+=(pwd scheduler)

	if type -p python >/dev/null ; then
		__powerline_retval+=(python)
	fi

	if type -p git >/dev/null ; then
		__powerline_retval+=(git)
	fi

	if type -p python >/dev/null ; then
		__powerline_retval+=(openstack)
	fi

	if type -p docker-compose >/dev/null ; then
		__powerline_retval+=(docker)
	fi

	if type -p kubectl >/dev/null; then
		__powerline_retval+=(k8s)
	fi

	__powerline_retval+=(cmdtime status)
}

function __powerline_autoicons {
	# Configurer les séparateurs
	typeset mode
	mode=${POWERLINE_ICONS-auto}
	if [ "${mode}" = "auto" ] ; then
		case "$TERM" in
			*256color|*-termite)
				mode=powerline
				;;
			*)
				mode=compat
				;;
		esac
	fi

	# LC_CTYPE seems to fail with C.UTF8
	#typeset LC_CTYPE=$__powerline_utf8
	typeset LC_ALL=$__powerline_utf8
	case "${mode}" in
		compat)
			: ${POWERLINE_SEP:=$(echo -ne '\u25B6')}
			: ${POWERLINE_THINSEP:=$(echo -ne '\u276F')}
			: ${POWERLINE_K8S_ICON:=*}
			;;
		powerline)
			: ${POWERLINE_SEP:=$(echo -ne '\uE0B0')}
			: ${POWERLINE_THINSEP:=$(echo -ne '\uE0B1')}
			: ${POWERLINE_GIT_ICON:=$(echo -ne '\uE0A0 ')}  # de la police Powerline
			: ${POWERLINE_K8S_ICON:=$(echo -ne '\u2638 ')}
			;;
		flat)
			: ${POWERLINE_SEP:=}
			: ${POWERLINE_THINSEP:=}
			;;
		icons-in-terminal)
			: ${POWERLINE_SEP:=$(echo -ne '\uE0B0')}
			: ${POWERLINE_THINSEP:=$(echo -ne '\uE0B1')}
			: ${POWERLINE_NEWMAIL_ICON:=$(echo -ne '\uE0E4 ')}
			: ${POWERLINE_FAIL_ICON:=$(echo -ne '\uF071 ')}
			: ${POWERLINE_GIT_DETACHED_ICON:=$(echo -ne '\uF0C1 ')}
			: ${POWERLINE_GIT_ICON:=$(echo -ne '\uEDCE ')}
			: ${POWERLINE_HOSTNAME_ICON:=$(echo -ne '\uE4BA ')}
			#: ${POWERLINE_CLOCK_ICON:=$(echo -ne '\uF017 ')}
			: ${POWERLINE_CLOCKRUN_ICON:=$(echo -ne '\uF551 ')}
			: ${POWERLINE_OPENSTACK_ICON:=$(echo -ne '\uE574 ')}
			: ${POWERLINE_PWD_ICON:=$(echo -ne '\uE015 ')}
			: ${POWERLINE_HOME_ICON:=$(echo -ne '\uE67D ')}
			: ${POWERLINE_PYTHON_ICON:=$(echo -ne '\uEE10 ')}
			: ${POWERLINE_DOCKER_ICON:=$(echo -ne '\uE8EA ')}
			: ${POWERLINE_K8S_ICON:=$(echo -ne '\u2638 ')}
			;;
		nerd-fonts)  # cf https://www.nerdfonts.com/cheat-sheet
			: ${POWERLINE_SEP:=$(echo -ne '\uE0B0')}                 # nf-pl-left_hard_divider
			: ${POWERLINE_THINSEP:=$(echo -ne '\uE0B1')}             # nf-pl-left_soft_divider
			: ${POWERLINE_NEWMAIL_ICON:=$(echo -ne '\uFBCD')}        # nf-mdi-email_alert
			: ${POWERLINE_FAIL_ICON:=$(echo -ne '\uF071 ')}          # nf-fa-exclamation_triangle
			: ${POWERLINE_GIT_DETACHED_ICON:=$(echo -ne '\uF06A ')}  # nf-fa-exclamation_circle
			: ${POWERLINE_GIT_ICON:=$(echo -ne '\uE725 ')}           # nf-dev-git_branch
			: ${POWERLINE_HOSTNAME_ICON:=$(echo -ne '\uF015 ')}      # nf-fa-home
			: ${POWERLINE_CLOCK_ICON:=$(echo -ne '\uF017 ')}         # nf-fa-clock_o
			: ${POWERLINE_CLOCKRUN_ICON:=$(echo -ne '\uF651 ')}      # nf-mdi-clock_fast
			: ${POWERLINE_OPENSTACK_ICON:=$(echo -ne '\uFCB4 ')}     # nf-mdi-cloud_tags
			: ${POWERLINE_PWD_ICON:=$(echo -ne '\uF07B ')}           # nf-fa-folder
			: ${POWERLINE_PWD_ICON:=$(echo -ne '\uF7DB ')}           # nf-mdi-home
			: ${POWERLINE_PYTHON_ICON:=$(echo -ne '\uE235 ')}        # nf-fae-python
			: ${POWERLINE_DOCKER_ICON:=$(echo -ne '\uF308 ')}        # nf-linux-docker
			: ${POWERLINE_K8S_ICON:=$(echo -ne '\uFD31 ')}           # nf-mdi-ship_wheel
			;;
		*)
			echo "POWERLINE_ICONS=${mode} inconnu." >&2
			;;
	esac
}

function __powerline_init_segments {
	typeset segment
	typeset init
	for segment in ${POWERLINE_SEGMENTS} ; do
		init=__powerline_init_$segment
		if type -t $init &> /dev/null ; then
			$init
		fi
	done
}

function __powerline_init_utf8 {
	typeset locales="$(locale -a 2>/dev/null|grep -ie utf8 -e utf-8)" localepref="C en_US en_GB"
	typeset locavail locpref
	for locpref in $localepref; do
		for locavail in $locales; do
			typeset loctest="${locavail%.*}"
			[[ "$loctest" == "$locpref" ]] && __powerline_utf8="$locavail" && break 2
		done
	done
}

# Init utf8
__powerline_init_utf8

# Initialiser les segments à partir de l'environnement.
__powerline_autoicons
__powerline_autosegments
: "${POWERLINE_SEGMENTS:=${__powerline_retval[*]}}"
__powerline_init_segments

# Integrrate with myshell
mys_promptfunc_register __update_ps1

