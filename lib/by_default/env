# vim: ft=sh

# Some default path
mys_path_binadd "~/bin" "~/.local/bin"
mys_path_binadd "/usr/local/bin" "/usr/local/sbin"
mys_path_manadd "/usr/local/share/man" 
mys_path_libadd "/usr/local/lib" "/usr/X11R6/lib"

# Some relatively common 3rd party tools
mys_path_binadd "/usr/symcli/bin" "/opt/VRTS/bin" "/opt/VRTSvcs/bin"
mys_path_manadd "/usr/symcli/man" "/opt/VRTS/man" "/opt/VRTSvcs/man"


# VIM FTW
mys_isavail "vim" && export EDITOR="vim"

# Aliases cause I'm lazy
alias ls="ls --color=tty"
alias l="ls -al"
alias s="screen -r"
alias g="grep"
alias gh="getent hosts"
alias gp="getent passwd"
alias gg="getent group"

# That one to make my own aliases work
alias sudo="sudo "

alias ydiff="diff -y --suppress-common-lines"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ......="cd ../../../../.."

alias ytdl="yt-dlp --ignore-errors --embed-thumbnail --restrict-filenames -4 --trim-filenames 120"
alias ytdl720="ytdl -f '[height<=720]'"

alias psa="ps auxf"
alias psg="ps auxf | grep"


# Override RM to protect critical folders. Regex
typeset -gxa MYS_RM_PROTECT=(
	# All files and folders in homedir root (to avoid 'rm -rf *')
	"rgx:$HOME/[^/]+"
	"$HOME/.ssh/*"
)
function rmsafe {
	typeset todel= safedir= confirmdir=""
	typeset -A safe2abs=

	# Also parse once the protected paths to resolve absolute path
	for safedir in "${MYS_RM_PROTECT[@]}"; do
		safe2abs[$safedir]="$(readlink -f $safedir || realpath $safedir)"
	done
	# Scan for protected paths
	for todel in "$@"; do
		typeset todelabs="$(readlink -f "$todel" 2>/dev/null || realpath "$todel")"
		for safedir in "${MYS_RM_PROTECT[@]}"; do
			#case safedir in
				# Regex
			#	rgx:*)
			#typeset safeabs="$(readlink -f "$
			# Check with relative or  absolute path
			if [[ "$todel" =~ ^$safedir ]] || [[ "$todelabs" =~ ^$safedir$ ]]; then
				confirmdir+="  - '$todel'   folder '$todelabs'   safedir '$safedir'\n"
			fi
		done
	done

	# Check if we have protected paths
	if [[ -n "$confirmdir" ]]; then
		echo >&2 "!!!!!!!!!!!!!!!!!!!!!!!!!!!     WARNING     !!!!!!!!!!!!!!!!!!!!!!!!!!!"
		echo >&2 "You are about to remove content in a protected dir. Matched entries:"
		echo >&2 -e "$confirmdir"
		typeset answer=""
		while [[ "$answer" != "YES" ]]; do
			echo >&2 "!! Are you sure ? Enter 'yes' in UPPERCASE to confinue, Ctrl+C to cancel !!"
			read answer
		done
	fi

	# Call real rm binary
	echo $(type -P rm) "$@"
}

#
alias flake8="flake8 --ignore=E501"

# Term PS1 (default)
#unset PROMPT_COMMAND
#export PS1='\[\033[01;31m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] [$?] \$ '  # Bash
#export PS1='[01;31m\]\u@\h[00m\]:[01;34m\]\w[00m\] [$?] \$ ' # KSH

function viw {
	for b in "$@"; do
		typeset p="$(\type -P $b)"
		if [[ -n "$p" ]]; then
			echo "$b => $p"
			${EDITOR:-vim} $p
		else
			echo "Unable to locate '$b'"
		fi
	done
}

function newop {
	# I want "$*" and not "$@"
	typeset -u name="$*"
	[[ -z "$name" ]] && { echo "Usage: newop name of the op"; return 1; }
	typeset fold="$HOME/OPERATIONS/$(date +'%y-%m-%d')_${name// /_}"
	mkdir -p "$fold"
	cd "$fold"
}
function lastop {
	typeset -u filter="$1"
	typeset fold="$HOME/OPERATIONS"
	typeset last="$(\ls -dr $fold/*$filter* 2>/dev/null|head -n1)"
	if [[ -n "$last" ]];
		then cd "$last"
	else
		echo "No last operation found in $fold/*$filter*"
	fi
}


# Z (https://github.com/rupa/z)
if [[ -s "$MYSHELL_BIN/z.sh" ]]; then
	source "$MYSHELL_BIN/z.sh"

	function z_promptfunc {
		typeset ptrn="" path="$(command pwd -P 2>/dev/null)"
		while read ptrn; do
			[[ "${path#$ptrn}" != "$path" ]] && return
		done < <(\cat "$HOME/.z.ignore" 2>/dev/null)

		_z --add "$path" 2>/dev/null
	}

	mys_promptfunc_register "z_promptfunc"
fi
